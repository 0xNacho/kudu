// Copyright (c) 2013, Cloudera, inc.
package kudu.consensus;

import "common/common.proto";
import "common/wire_protocol.proto";
import "server/metadata.proto";
import "tablet/tablet.proto";
import "tserver/tserver.proto";

// ===========================================================================
//  Generic/Meta- Messages
// ===========================================================================

// An id for a generic state machine operation. Composed of the leaders' term
// plus the index of the operation in that term, e.g., the <index>th operation
// of the <term>th leader.
message OpId {
  required uint64 term = 1;
  required uint64 index = 2;
}

// ===========================================================================
//  External Consensus Messages
// ===========================================================================

// The types of operations that need a commit message, i.e. those that require
// at least one round of the consensus algorithm.
enum OperationType {
  NO_OP = 1;
  OP_ABORT = 2;
  WRITE_OP = 3;
  ALTER_SCHEMA_OP = 4;
  CHANGE_CONFIG_OP = 5;
}

// A wrapper around replicates and commits so that we can send to peers
// in total order without having to rebuild order between replicates/commits.
// Each operation must either have a replicate or a commit, but not both.
message OperationPB {
  required OpId id = 2;
  optional ReplicateMsg replicate = 3;
  optional CommitMsg commit = 4;
}

// A Replicate message, sent to replicas by leader to indicate this operation must
// be stored in the WAL/SM log, as part of the first phase of the two phase
// commit.
message ReplicateMsg {
  required OperationType op_type = 2;
  optional NoOp no_op = 3;
  optional tserver.WriteRequestPB write_request = 4;
  optional tserver.AlterSchemaRequestPB alter_schema_request = 5;
  optional tserver.ChangeConfigRequestPB change_config_request = 6;
}

// A commit message for a previous operation.
// This is a commit in the consensus sense and may abort/commit any operation
// that required a consensus round.
message CommitMsg {
  required OperationType op_type = 1;
  // the id of the message this commit pertains to
  optional OpId commited_op_id = 2;
  // the transaction timestamp for the operation
  required fixed64 timestamp = 3;
  // The operations that were applied and/or failed in this transaction.
  optional tablet.TxResultPB result = 4;
  // The response to the write request, will contain the global status
  // (OK or otherwise) and the row errors, if any.
  optional tserver.WriteResponsePB write_response = 5;
  // The response to the alter schema request
  optional tserver.AlterSchemaResponsePB alter_schema_response = 6;
  optional tserver.ChangeConfigResponsePB change_config_response = 7;
}

// ===========================================================================
//  Internal Consensus Messages and State
// ===========================================================================

// A no-op message to send a heartbeat from leader to followers
// can also be used to witness a term change.
message NoOp {
}

message PerOpErrorPB {
  // The id of the operation that failed in the other peer.
  required OpId id = 1;
  // The Status explaining why the operation failed.
  required AppStatusPB status = 2;
}

// Status message received in the peer responses.
message ConsensusStatusPB {

  // The last message received by the peer.
  // Messages up to this one do not need re-sending.
  required OpId received_watermark = 2;

  // The last ReplicateMsg that was logged by the peer.
  required OpId replicated_watermark = 1;

  // The first commit applied by the peer before which all other commits
  // have been applied. The timestamp of this commit is the 'safe' timestamp
  // for the replica, i.e. were the replica and leader to be scanned at this
  // timestamp they would return the same results.
  //
  // If safe_commit_watermark is S, then for all COMMIT messages with an
  // OpId <= S, that commit has been applied at this replica.
  // NOTE: that this *does not* imply that for a REPLICATE message with
  // OpId <= S, that that replicate message has necessarily been committed.
  // For example, with the following sequence:
  //
  // 1 REPLICATE insert A
  // 2 REPLICATE insert B
  // 3 COMMIT 1
  //
  // then safe_commit_watermark = 3 does not imply that "insert B" has
  // been committed.
  required OpId safe_commit_watermark = 3;

  // Per operation errors.
  repeated PerOpErrorPB errors = 4;
}

// A consensus request message, the basic unit of a consensus round.
message ConsensusRequestPB {
  required string tablet_id = 1;
  // the uuid of the sender peer
  required bytes sender_uuid = 2;
  // sequence of operations to be replicated/executed by this peer
  repeated OperationPB ops = 3;
}

message ConsensusResponsePB {
  // A generic error message (such as tablet not found), per operation
  // messages are sent along with the consensus status.
  optional tserver.TabletServerErrorPB error = 1;
  optional ConsensusStatusPB status = 3;
}

// A message reflecting the status of an in-flight transaction.
message TransactionStatusPB {
  required OpId op_id = 1;
  required OperationType tx_type = 2;
  // Time the transaction has been in flight.
  required int64 running_for_micros = 3;
  // Quick human-readable description (e.g., ToString() output).
  required string description = 4;
  // If tracing is enabled when viewing the transaction, the trace
  // buffer is copied here.
  optional string trace_buffer = 5;
}
