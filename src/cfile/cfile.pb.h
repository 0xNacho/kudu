// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfile.proto

#ifndef PROTOBUF_cfile_2eproto__INCLUDED
#define PROTOBUF_cfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace kudu {
namespace cfile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cfile_2eproto();
void protobuf_AssignDesc_cfile_2eproto();
void protobuf_ShutdownFile_cfile_2eproto();

class CFileHeaderPB;
class BlockPointerPB;
class BTreeMetaPB;
class BTreeInfoPB;
class IndexBlockTrailerPB;
class CFileFooterPB;

enum IndexBlockTrailerPB_BlockType {
  IndexBlockTrailerPB_BlockType_LEAF = 0,
  IndexBlockTrailerPB_BlockType_INTERNAL = 1
};
bool IndexBlockTrailerPB_BlockType_IsValid(int value);
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB_BlockType_BlockType_MIN = IndexBlockTrailerPB_BlockType_LEAF;
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB_BlockType_BlockType_MAX = IndexBlockTrailerPB_BlockType_INTERNAL;
const int IndexBlockTrailerPB_BlockType_BlockType_ARRAYSIZE = IndexBlockTrailerPB_BlockType_BlockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexBlockTrailerPB_BlockType_descriptor();
inline const ::std::string& IndexBlockTrailerPB_BlockType_Name(IndexBlockTrailerPB_BlockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexBlockTrailerPB_BlockType_descriptor(), value);
}
inline bool IndexBlockTrailerPB_BlockType_Parse(
    const ::std::string& name, IndexBlockTrailerPB_BlockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexBlockTrailerPB_BlockType>(
    IndexBlockTrailerPB_BlockType_descriptor(), name, value);
}
// ===================================================================

class CFileHeaderPB : public ::google::protobuf::Message {
 public:
  CFileHeaderPB();
  virtual ~CFileHeaderPB();
  
  CFileHeaderPB(const CFileHeaderPB& from);
  
  inline CFileHeaderPB& operator=(const CFileHeaderPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CFileHeaderPB& default_instance();
  
  void Swap(CFileHeaderPB* other);
  
  // implements Message ----------------------------------------------
  
  CFileHeaderPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CFileHeaderPB& from);
  void MergeFrom(const CFileHeaderPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 major_version = 1;
  inline bool has_major_version() const;
  inline void clear_major_version();
  static const int kMajorVersionFieldNumber = 1;
  inline ::google::protobuf::int32 major_version() const;
  inline void set_major_version(::google::protobuf::int32 value);
  
  // required int32 minor_version = 2;
  inline bool has_minor_version() const;
  inline void clear_minor_version();
  static const int kMinorVersionFieldNumber = 2;
  inline ::google::protobuf::int32 minor_version() const;
  inline void set_minor_version(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.CFileHeaderPB)
 private:
  inline void set_has_major_version();
  inline void clear_has_major_version();
  inline void set_has_minor_version();
  inline void clear_has_minor_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 major_version_;
  ::google::protobuf::int32 minor_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static CFileHeaderPB* default_instance_;
};
// -------------------------------------------------------------------

class BlockPointerPB : public ::google::protobuf::Message {
 public:
  BlockPointerPB();
  virtual ~BlockPointerPB();
  
  BlockPointerPB(const BlockPointerPB& from);
  
  inline BlockPointerPB& operator=(const BlockPointerPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPointerPB& default_instance();
  
  void Swap(BlockPointerPB* other);
  
  // implements Message ----------------------------------------------
  
  BlockPointerPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPointerPB& from);
  void MergeFrom(const BlockPointerPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);
  
  // required int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.BlockPointerPB)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static BlockPointerPB* default_instance_;
};
// -------------------------------------------------------------------

class BTreeMetaPB : public ::google::protobuf::Message {
 public:
  BTreeMetaPB();
  virtual ~BTreeMetaPB();
  
  BTreeMetaPB(const BTreeMetaPB& from);
  
  inline BTreeMetaPB& operator=(const BTreeMetaPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BTreeMetaPB& default_instance();
  
  void Swap(BTreeMetaPB* other);
  
  // implements Message ----------------------------------------------
  
  BTreeMetaPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BTreeMetaPB& from);
  void MergeFrom(const BTreeMetaPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.BTreeMetaPB)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* identifier_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static BTreeMetaPB* default_instance_;
};
// -------------------------------------------------------------------

class BTreeInfoPB : public ::google::protobuf::Message {
 public:
  BTreeInfoPB();
  virtual ~BTreeInfoPB();
  
  BTreeInfoPB(const BTreeInfoPB& from);
  
  inline BTreeInfoPB& operator=(const BTreeInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BTreeInfoPB& default_instance();
  
  void Swap(BTreeInfoPB* other);
  
  // implements Message ----------------------------------------------
  
  BTreeInfoPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BTreeInfoPB& from);
  void MergeFrom(const BTreeInfoPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .kudu.cfile.BTreeMetaPB metadata = 1;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  inline const ::kudu::cfile::BTreeMetaPB& metadata() const;
  inline ::kudu::cfile::BTreeMetaPB* mutable_metadata();
  inline ::kudu::cfile::BTreeMetaPB* release_metadata();
  
  // required .kudu.cfile.BlockPointerPB root_block = 2;
  inline bool has_root_block() const;
  inline void clear_root_block();
  static const int kRootBlockFieldNumber = 2;
  inline const ::kudu::cfile::BlockPointerPB& root_block() const;
  inline ::kudu::cfile::BlockPointerPB* mutable_root_block();
  inline ::kudu::cfile::BlockPointerPB* release_root_block();
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.BTreeInfoPB)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_root_block();
  inline void clear_has_root_block();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::kudu::cfile::BTreeMetaPB* metadata_;
  ::kudu::cfile::BlockPointerPB* root_block_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static BTreeInfoPB* default_instance_;
};
// -------------------------------------------------------------------

class IndexBlockTrailerPB : public ::google::protobuf::Message {
 public:
  IndexBlockTrailerPB();
  virtual ~IndexBlockTrailerPB();
  
  IndexBlockTrailerPB(const IndexBlockTrailerPB& from);
  
  inline IndexBlockTrailerPB& operator=(const IndexBlockTrailerPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexBlockTrailerPB& default_instance();
  
  void Swap(IndexBlockTrailerPB* other);
  
  // implements Message ----------------------------------------------
  
  IndexBlockTrailerPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IndexBlockTrailerPB& from);
  void MergeFrom(const IndexBlockTrailerPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef IndexBlockTrailerPB_BlockType BlockType;
  static const BlockType LEAF = IndexBlockTrailerPB_BlockType_LEAF;
  static const BlockType INTERNAL = IndexBlockTrailerPB_BlockType_INTERNAL;
  static inline bool BlockType_IsValid(int value) {
    return IndexBlockTrailerPB_BlockType_IsValid(value);
  }
  static const BlockType BlockType_MIN =
    IndexBlockTrailerPB_BlockType_BlockType_MIN;
  static const BlockType BlockType_MAX =
    IndexBlockTrailerPB_BlockType_BlockType_MAX;
  static const int BlockType_ARRAYSIZE =
    IndexBlockTrailerPB_BlockType_BlockType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BlockType_descriptor() {
    return IndexBlockTrailerPB_BlockType_descriptor();
  }
  static inline const ::std::string& BlockType_Name(BlockType value) {
    return IndexBlockTrailerPB_BlockType_Name(value);
  }
  static inline bool BlockType_Parse(const ::std::string& name,
      BlockType* value) {
    return IndexBlockTrailerPB_BlockType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 num_entries = 1;
  inline bool has_num_entries() const;
  inline void clear_num_entries();
  static const int kNumEntriesFieldNumber = 1;
  inline ::google::protobuf::int32 num_entries() const;
  inline void set_num_entries(::google::protobuf::int32 value);
  
  // required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::kudu::cfile::IndexBlockTrailerPB_BlockType type() const;
  inline void set_type(::kudu::cfile::IndexBlockTrailerPB_BlockType value);
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.IndexBlockTrailerPB)
 private:
  inline void set_has_num_entries();
  inline void clear_has_num_entries();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 num_entries_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static IndexBlockTrailerPB* default_instance_;
};
// -------------------------------------------------------------------

class CFileFooterPB : public ::google::protobuf::Message {
 public:
  CFileFooterPB();
  virtual ~CFileFooterPB();
  
  CFileFooterPB(const CFileFooterPB& from);
  
  inline CFileFooterPB& operator=(const CFileFooterPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CFileFooterPB& default_instance();
  
  void Swap(CFileFooterPB* other);
  
  // implements Message ----------------------------------------------
  
  CFileFooterPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CFileFooterPB& from);
  void MergeFrom(const CFileFooterPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .kudu.cfile.BTreeInfoPB btrees = 1;
  inline int btrees_size() const;
  inline void clear_btrees();
  static const int kBtreesFieldNumber = 1;
  inline const ::kudu::cfile::BTreeInfoPB& btrees(int index) const;
  inline ::kudu::cfile::BTreeInfoPB* mutable_btrees(int index);
  inline ::kudu::cfile::BTreeInfoPB* add_btrees();
  inline const ::google::protobuf::RepeatedPtrField< ::kudu::cfile::BTreeInfoPB >&
      btrees() const;
  inline ::google::protobuf::RepeatedPtrField< ::kudu::cfile::BTreeInfoPB >*
      mutable_btrees();
  
  // @@protoc_insertion_point(class_scope:kudu.cfile.CFileFooterPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::kudu::cfile::BTreeInfoPB > btrees_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_cfile_2eproto();
  friend void protobuf_AssignDesc_cfile_2eproto();
  friend void protobuf_ShutdownFile_cfile_2eproto();
  
  void InitAsDefaultInstance();
  static CFileFooterPB* default_instance_;
};
// ===================================================================


// ===================================================================

// CFileHeaderPB

// required int32 major_version = 1;
inline bool CFileHeaderPB::has_major_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFileHeaderPB::set_has_major_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CFileHeaderPB::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CFileHeaderPB::clear_major_version() {
  major_version_ = 0;
  clear_has_major_version();
}
inline ::google::protobuf::int32 CFileHeaderPB::major_version() const {
  return major_version_;
}
inline void CFileHeaderPB::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
}

// required int32 minor_version = 2;
inline bool CFileHeaderPB::has_minor_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFileHeaderPB::set_has_minor_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CFileHeaderPB::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CFileHeaderPB::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
inline ::google::protobuf::int32 CFileHeaderPB::minor_version() const {
  return minor_version_;
}
inline void CFileHeaderPB::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
}

// -------------------------------------------------------------------

// BlockPointerPB

// required int64 offset = 1;
inline bool BlockPointerPB::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPointerPB::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPointerPB::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPointerPB::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 BlockPointerPB::offset() const {
  return offset_;
}
inline void BlockPointerPB::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 size = 2;
inline bool BlockPointerPB::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockPointerPB::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockPointerPB::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockPointerPB::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 BlockPointerPB::size() const {
  return size_;
}
inline void BlockPointerPB::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// BTreeMetaPB

// required string identifier = 1;
inline bool BTreeMetaPB::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BTreeMetaPB::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BTreeMetaPB::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BTreeMetaPB::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& BTreeMetaPB::identifier() const {
  return *identifier_;
}
inline void BTreeMetaPB::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void BTreeMetaPB::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void BTreeMetaPB::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BTreeMetaPB::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* BTreeMetaPB::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BTreeInfoPB

// required .kudu.cfile.BTreeMetaPB metadata = 1;
inline bool BTreeInfoPB::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BTreeInfoPB::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BTreeInfoPB::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BTreeInfoPB::clear_metadata() {
  if (metadata_ != NULL) metadata_->::kudu::cfile::BTreeMetaPB::Clear();
  clear_has_metadata();
}
inline const ::kudu::cfile::BTreeMetaPB& BTreeInfoPB::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::kudu::cfile::BTreeMetaPB* BTreeInfoPB::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::kudu::cfile::BTreeMetaPB;
  return metadata_;
}
inline ::kudu::cfile::BTreeMetaPB* BTreeInfoPB::release_metadata() {
  clear_has_metadata();
  ::kudu::cfile::BTreeMetaPB* temp = metadata_;
  metadata_ = NULL;
  return temp;
}

// required .kudu.cfile.BlockPointerPB root_block = 2;
inline bool BTreeInfoPB::has_root_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BTreeInfoPB::set_has_root_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BTreeInfoPB::clear_has_root_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BTreeInfoPB::clear_root_block() {
  if (root_block_ != NULL) root_block_->::kudu::cfile::BlockPointerPB::Clear();
  clear_has_root_block();
}
inline const ::kudu::cfile::BlockPointerPB& BTreeInfoPB::root_block() const {
  return root_block_ != NULL ? *root_block_ : *default_instance_->root_block_;
}
inline ::kudu::cfile::BlockPointerPB* BTreeInfoPB::mutable_root_block() {
  set_has_root_block();
  if (root_block_ == NULL) root_block_ = new ::kudu::cfile::BlockPointerPB;
  return root_block_;
}
inline ::kudu::cfile::BlockPointerPB* BTreeInfoPB::release_root_block() {
  clear_has_root_block();
  ::kudu::cfile::BlockPointerPB* temp = root_block_;
  root_block_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// IndexBlockTrailerPB

// required int32 num_entries = 1;
inline bool IndexBlockTrailerPB::has_num_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IndexBlockTrailerPB::set_has_num_entries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IndexBlockTrailerPB::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IndexBlockTrailerPB::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
inline ::google::protobuf::int32 IndexBlockTrailerPB::num_entries() const {
  return num_entries_;
}
inline void IndexBlockTrailerPB::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
}

// required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
inline bool IndexBlockTrailerPB::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IndexBlockTrailerPB::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IndexBlockTrailerPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IndexBlockTrailerPB::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::kudu::cfile::IndexBlockTrailerPB_BlockType IndexBlockTrailerPB::type() const {
  return static_cast< ::kudu::cfile::IndexBlockTrailerPB_BlockType >(type_);
}
inline void IndexBlockTrailerPB::set_type(::kudu::cfile::IndexBlockTrailerPB_BlockType value) {
  GOOGLE_DCHECK(::kudu::cfile::IndexBlockTrailerPB_BlockType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CFileFooterPB

// repeated .kudu.cfile.BTreeInfoPB btrees = 1;
inline int CFileFooterPB::btrees_size() const {
  return btrees_.size();
}
inline void CFileFooterPB::clear_btrees() {
  btrees_.Clear();
}
inline const ::kudu::cfile::BTreeInfoPB& CFileFooterPB::btrees(int index) const {
  return btrees_.Get(index);
}
inline ::kudu::cfile::BTreeInfoPB* CFileFooterPB::mutable_btrees(int index) {
  return btrees_.Mutable(index);
}
inline ::kudu::cfile::BTreeInfoPB* CFileFooterPB::add_btrees() {
  return btrees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::kudu::cfile::BTreeInfoPB >&
CFileFooterPB::btrees() const {
  return btrees_;
}
inline ::google::protobuf::RepeatedPtrField< ::kudu::cfile::BTreeInfoPB >*
CFileFooterPB::mutable_btrees() {
  return &btrees_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfile
}  // namespace kudu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kudu::cfile::IndexBlockTrailerPB_BlockType>() {
  return ::kudu::cfile::IndexBlockTrailerPB_BlockType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfile_2eproto__INCLUDED
