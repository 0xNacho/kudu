// Copyright (c) 2013, Cloudera, inc.
// Confidential Cloudera Information: Covered by NDA.
package kudu.consensus;

import "kudu/common/common.proto";

// ===========================================================================
//  Consensus Metadata
// ===========================================================================

// A peer in a quorum.
message QuorumPeerPB {
  // The possible roles for quorum peers.
  enum Role {
    // Indicates this node is a follower in the quorum, i.e. that it participates
    // in majorities and accepts Consensus::Update() calls.
    FOLLOWER = 0;
    // Indicates this node is the current leader of the quorum, i.e. that it
    // participates in majorities and accepts Consensus::Append() calls.
    LEADER = 2;
    // Indicates that this node participates in the quorum in a passive role,
    // i.e. that it accepts Consensus::Update() calls but does not participate
    // in elections or majorities.
    LEARNER = 3;
    // Indicates that this node is not a participant of the quorum, i.e. does
    // not accept Consensus::Update() or Consensus::Update() and cannot
    // participate in elections or majorities. This is usually the role of a node
    // that leaves the quorum.
    NON_PARTICIPANT = 4;
    // Indicates that this peer does not know its role in this particular quorum.
    UNKNOWN = 5;
  };
  // Permanent uuid is optional: QuorumPeerPB/QuorumPB instances may
  // be created before the permanent uuid is known (e.g., when
  // manually specifying a quorum for Master/CatalogManager);
  // permament uuid can be retrieved at a later time through RPC.
  optional bytes permanent_uuid = 1;
  // TODO: can we just make this field required and get rid of UNKNOWN?
  optional Role role = 2 [ default = UNKNOWN ];
  optional HostPortPB last_known_addr = 3;
}

// A set of quorum peers, serving a single tablet.
message QuorumPB {
  // The index of the operation which serialized this QuorumPB through
  // consensus. It is set when the operation is consensus-committed (replicated
  // to a majority of the quorum) and before the consensus metadata is updated.
  // It is left undefined if the operation isn't committed.
  optional int64 opid_index = 1;

  // Whether this is a local or distributed quorum (i.e. whether to use a local or dist
  // implementation of consensus).
  optional bool local = 2 [default = true];

  // The set of peers in the quorum.
  repeated QuorumPeerPB peers = 3;
}

// This PB is used to serialize all of the persistent state needed for
// Consensus that is not in the WAL, such as leader election and
// communication on startup.
message ConsensusMetadataPB {
  // Last-committed quorum membership.
  required QuorumPB committed_quorum = 1;

  // Latest term this server has seen.
  // When a quorum is first created, initialized to 0.
  //
  // Whenever a new election is started, the candidate increments this by one
  // and requests votes from peers.
  //
  // If any RPC or RPC response is received from another node containing a term higher
  // than this one, the server should step down to FOLLOWER and set its current_term to
  // match the caller's term.
  //
  // If a follower receives an UpdateConsensus RPC with a term lower than this
  // term, then that implies that the RPC is coming from a former LEADER who has
  // not realized yet that its term is over. In that case, we will reject the
  // UpdateConsensus() call with ConsensusErrorPB::INVALID_TERM.
  //
  // If a follower receives a RequestConsensusVote() RPC with an earlier term,
  // the vote is denied.
  required uint64 current_term = 2;

  // Permanent UUID of the candidate voted for in 'current_term', or not present
  // if no vote was made in the current term.
  optional string voted_for = 3;
}
