// Copyright (c) 2014, Cloudera, inc.
package kudu.tablet;

import "kudu/common/common.proto";
import "kudu/fs/fs.proto";
import "kudu/server/metadata.proto";

// ============================================================================
//  Tablet Metadata
// ============================================================================

message ColumnDataPB {
  required BlockIdPB block = 2;
  required ColumnSchemaPB schema = 3;
}

message DeltaDataPB {
  required BlockIdPB block = 2;
}

message RowSetDataPB {
  required uint64 id = 1;
  required int64 last_durable_dms_id = 2;
  repeated ColumnDataPB columns = 3;
  repeated DeltaDataPB redo_deltas = 4;
  repeated DeltaDataPB undo_deltas = 5;
  optional BlockIdPB bloom_block = 6;
  optional BlockIdPB adhoc_index_block = 7;
}

// State flags indicating whether the tablet is in the middle of being copied
// and is therefore not possible to bring up.
enum TabletBootstrapStatePB {
  // The tablet is set to REMOTE_BOOTSTRAP_COPYING state when in the middle of
  // remote bootstrap while copying data files from a remote peer. If a tablet
  // server crashes with a tablet in this state, the remote bootstrap process
  // must be restarted for that tablet.
  REMOTE_BOOTSTRAP_COPYING = 0;

  // Fresh empty tablets and successfully copied tablets are set to the
  // REMOTE_BOOTSTRAP_DONE state.
  REMOTE_BOOTSTRAP_DONE = 1;
}

// The super-block keeps track of the tablet data blocks.
// A tablet contains one or more RowSets, which contain
// a set of blocks (one for each column), a set of delta blocks
// and optionally a block containing the bloom filter
// and a block containing the compound-keys.
message TabletSuperBlockPB {
  // SuperBlock sequence number.
  // This is incremented every time the superblock is successfully written,
  // in order to easily alternate between block_a and block_b.
  required uint64 sequence = 1;

  // Tablet Id
  // TODO: rename to tablet_id
  required string oid = 2;

  // The latest durable MemRowSet id
  required int64 last_durable_mrs_id = 3;

  // Tablet start-key
  required bytes start_key = 4;

  // Tablet end-key
  required bytes end_key = 5;

  // Tablet RowSets
  repeated RowSetDataPB rowsets = 6;

  // The latest schema
  // TODO: maybe this should be TableSchemaPB? Need to actually put those attributes
  // into use throughout the code. Using the simpler one for now.
  required string table_name = 7;
  required SchemaPB schema = 8;
  required uint32 schema_version = 9;

  // The last known remote bootstrap state of the tablet.
  required TabletBootstrapStatePB remote_bootstrap_state = 10;

  // The latest QuorumPB this tablet was part of.
  // TODO make this required once dist consensus is fully integrated.
  optional metadata.QuorumPB quorum = 11;
}

// The enum of tablet states.
// Tablet states are sent in TabletReports and kept in TabletPeer.
enum TabletStatePB {

  // Indicates the Tablet is bootstrapping, i.e. that the Tablet is not
  // available for RPC.
  BOOTSTRAPPING = 0;

  // Indicates the Tablet is in the configuration phase. Tablet is available
  // for internal RPC calls (i.e. from other Peers) but not available to
  // clients.
  // FOLLOWER Peers will remain in this state until a message containing the
  // current configuration is received from the LEADER. Upon creating a new
  // connection to a Peer, the LEADER always sends the current configuration
  // first.
  // LEADER Peers will remain in this state until they are able to replicate
  // the configuration message where they are LEADER.
  CONFIGURING = 1;

  // Once the configuration phase is over Peers are in RUNNING state. In this
  // state Peers are available for client RPCs.
  RUNNING = 2;

  // The tablet failed to for some reason. TabletPeer::error() will return
  // the reason for the failure.
  FAILED = 3;

  // The Tablet is shutting down, and will not accept further requests.
  QUIESCING = 4;

  // The Tablet has been stopped.
  SHUTDOWN = 5;
}

// The master-block contains the two block-ids required to load the
// tablet super-block. The master-block is immutable and written to the
// "bootstrap table", on tablet creation, and it is used by the master
// to load all the tablets in the system at startup.
message TabletMasterBlockPB {
  required bytes table_id = 1;
  required bytes tablet_id = 2;
  required bytes block_a = 3;
  required bytes block_b = 4;
}
