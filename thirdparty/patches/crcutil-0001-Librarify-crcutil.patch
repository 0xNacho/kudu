From 70abc55afa97959a354fc709213e3a1f8364cd98 Mon Sep 17 00:00:00 2001
From: Mike Percy <mpercy@cloudera.com>
Date: Fri, 25 Apr 2014 17:17:08 -0700
Subject: [PATCH] Librarify crcutil

* interface.h only needs <stdlib.h> and <stdint.h>
* Use uint64_t as UINT64 type instead of unsigned long long
* Add factory for fast CRC32C functionality
* Hack up autogen.sh to generate a shared library
---
 autogen.sh            | 45 ++++++++++++++++++++++++---------------------
 examples/interface.cc |  9 +++++++++
 examples/interface.h  | 14 ++++++++++++--
 examples/usage.cc     | 32 ++++++++++++++++----------------
 4 files changed, 61 insertions(+), 39 deletions(-)

diff --git a/autogen.sh b/autogen.sh
index dc6cd16..6bd28c0 100755
--- a/autogen.sh
+++ b/autogen.sh
@@ -1,4 +1,4 @@
-#!/bin/bash
+#!/bin/bash -e
 
 # See http://mij.oltrelinux.com/devel/autoconf-automake/
 
@@ -43,7 +43,8 @@ echo "Generating preliminary configure.ac"
 autoscan
 
 sed 's/^AC_INIT(.*$/AC_INIT(crcutil, 1.0, crcutil@googlegroups.com)\
-AM_INIT_AUTOMAKE(crcutil, 1.0)\
+AM_INIT_AUTOMAKE([foreign -Wall -Werror])\
+AC_PROG_RANLIB() \
 AC_CONFIG_FILES([Makefile]) \
 AC_OUTPUT()/' configure.scan >configure.ac
 
@@ -62,8 +63,13 @@ echo "Generating ${target}"
 echo>${target} "AUTOMAKE_OPTIONS=foreign"
 
 # --pedantic -std=c99?
-crcutil_flags="-DCRCUTIL_USE_MM_CRC32=1 -Wall -msse2 -Icode"
-echo>${target} "AM_CXXFLAGS=${crcutil_flags}"
+crcutil_flags="-DCRCUTIL_USE_MM_CRC32=1 -Wall -msse2 -Icode -Iexamples -Itests -fPIC"
+crcutil_flags="${crcutil_flags} -O3"
+if [[ "$(c++ -dumpversion)" > "4.4.9" ]]; then
+  crcutil_flags="${crcutil_flags} -mcrc32"
+fi
+
+echo>>${target} "AM_CXXFLAGS=${crcutil_flags}"
 if [ "$(uname -a | grep ^Darwin)" == "" ] && [[ "$(c++ -dumpversion)" > "4.4.9" ]]; then
   # Static linking is not supported on Mac OS X.
   # Use static linking on Linux, otherwise GCC 4.5.0 linker produces
@@ -76,35 +82,32 @@ echo>>${target} "TESTS=crcutil_ut"
 sources=$(ls tests/*.cc tests/*.c tests/*.h code/*.cc code/*.h | grep -v intrinsic | tr "\n" " ")
 echo>>${target} "crcutil_ut_SOURCES=${sources}"
 
-echo>>${target} "tmpdir=/tmp"
-echo>>${target} "tmp_PROGRAMS=usage"
+# Don't install the crcutil "usage" example program.
+echo>>${target} "noinst_PROGRAMS=usage"
 echo>>${target} 'usage_CXXFLAGS=$(AM_CXXFLAGS) -Itests'
 sources=$(ls examples/*.cc examples/*.h code/*.cc code/*.h tests/aligned_alloc.h | grep -v intrinsic | tr "\n" " ")
 echo>>${target} "usage_SOURCES=${sources}"
 
+# Build a static library.
+echo>>${target} "lib_LIBRARIES=libcrcutil.a"
+libsources=$(ls examples/interface.cc examples/interface.h code/*.cc code/*.h tests/aligned_alloc.h | grep -v intrinsic | tr "\n" " ")
+echo>>${target} "libcrcutil_a_SOURCES=${libsources}"
+echo>>${target} "crcutilhdrsdir=\$(includedir)/crcutil"
+echo>>${target} "crcutilhdrs_HEADERS=examples/interface.h"
+
 echo "Creating Makefile.in"
 aclocal
 automake --add-missing
 autoconf
 
-cflags="-O3"
-if [[ "$(c++ -dumpversion)" > "4.4.9" ]]; then
-  cflags="${cflags} -mcrc32"
-fi
-
-cflags="${cflags} $2"
-
-./configure CXXFLAGS="${cflags}" CFLAGS="${cflags}"
-
 echo ""
-echo "Configured the library. Compiler flags:"
-echo "  ${cflags}"
+echo "Configured the library."
 echo "Library configuration flags:"
 echo "  ${crcutil_flags}"
+echo "You may now run ./configure && make && make install"
 echo ""
 
-if [ "${1}" == "configure" ]; then
-  exit
-fi
+exit 0
 
-make $1
+#./configure CXXFLAGS="${cflags}" CFLAGS="${cflags}"
+#make $1
diff --git a/examples/interface.cc b/examples/interface.cc
index 6c8a34f..69273d3 100644
--- a/examples/interface.cc
+++ b/examples/interface.cc
@@ -304,4 +304,13 @@ CRC *CRC::Create(UINT64 poly_lo,
       allocated_memory);
 }
 
+CRC *CRC::CreateCrc32c(bool canonical,
+                       UINT64 roll_start_value_lo,
+                       size_t roll_window_bytes,
+                       const void **allocated_memory) {
+  return Create(Crc32cSSE4::FixedGeneratingPolynomial(), 0, Crc32cSSE4::FixedDegree(),
+                canonical, roll_start_value_lo, 0, roll_window_bytes, IsSSE42Available(),
+                allocated_memory);
+}
+
 }  // namespace crcutil_interface
diff --git a/examples/interface.h b/examples/interface.h
index 2b3e2ee..c8f43b0 100644
--- a/examples/interface.h
+++ b/examples/interface.h
@@ -34,12 +34,13 @@
 #ifndef CRCUTIL_INTERFACE_H_
 #define CRCUTIL_INTERFACE_H_
 
-#include "std_headers.h"    // size_t
+#include <stdint.h> // for uint64_t
+#include <stdlib.h> // for size_t
 
 namespace crcutil_interface {
 
 // Many projects define their own uint64. Do it here.
-typedef unsigned long long UINT64;
+typedef uint64_t UINT64;
 
 class CRC {
  public:
@@ -69,6 +70,15 @@ class CRC {
                      bool use_sse4_2,
                      const void **allocated_memory);
 
+  // Creates a new instance of CRC32C, which is hardware-accelerated on
+  // Nehalem and newer Intel processors. The poly and degree are fixed,
+  // roll_start_value_hi must be 0, and SSE 4.2 is auto-detected.
+  // See above for the rest of the params.
+  static CRC *CreateCrc32c(bool canonical,
+                           UINT64 roll_start_value_lo,
+                           size_t roll_window_bytes,
+                           const void **allocated_memory);
+
   // Deletes the instance of CRC class.
   virtual void Delete() = 0;
 
diff --git a/examples/usage.cc b/examples/usage.cc
index 10c59fd..5d8c3aa 100644
--- a/examples/usage.cc
+++ b/examples/usage.cc
@@ -48,14 +48,14 @@ void Show(const crcutil_interface::CRC *crc) {
   //
   uint64 lo;
   crc->GeneratingPolynomial(&lo);
-  xprintf("Generating polynomial 0x%llx, degree %llu",
+  xprintf("Generating polynomial 0x%lx, degree %lu",
           lo,
           static_cast<uint64>(crc->Degree()));
   crc->CanonizeValue(&lo);
-  xprintf(", canonize_value=0x%llx", lo);
+  xprintf(", canonize_value=0x%lx", lo);
 
   crc->RollStartValue(&lo);
-  xprintf(", roll start value=0x%llx, roll window=%llu",
+  xprintf(", roll start value=0x%lx, roll window=%lu",
           lo,
           static_cast<uint64>(crc->RollWindowBytes()));
 
@@ -63,23 +63,23 @@ void Show(const crcutil_interface::CRC *crc) {
   // Check integrity of CRC tables.
   //
   crc->SelfCheckValue(&lo);
-  xprintf(", self check value 0x%llx\n", lo);
+  xprintf(", self check value 0x%lx\n", lo);
 
   //
   // Compute CRC.
   //
   lo = 0;
   crc->Compute(kTestData, sizeof(kTestData) - 1, &lo);
-  xprintf("CRC32C(\"%s\") = 0x%llx\n", kTestData, lo);
+  xprintf("CRC32C(\"%s\") = 0x%lx\n", kTestData, lo);
 
   //
   // Compute CRC (incrementally).
   //
   lo = 0;
   crc->Compute(kTestData, kTestDataHead, &lo);
-  xprintf("CRC32C(\"%.*s\", 0) = 0x%llx, ", kTestDataHead, kTestData, lo);
+  xprintf("CRC32C(\"%.*s\", 0) = 0x%lx, ", kTestDataHead, kTestData, lo);
   crc->Compute(kTestData + kTestDataHead, kTestDataTail, &lo);
-  xprintf("CRC32C(\"%s\", CRC32(\"%.*s\", 0)) = 0x%llx = CRC32(\"%s\")\n",
+  xprintf("CRC32C(\"%s\", CRC32\"%.*s\", 0)) = 0x%lx = CRC32(\"%s\")\n",
       kTestData + kTestDataHead, kTestDataHead, kTestData, lo, kTestData);
 
   //
@@ -91,7 +91,7 @@ void Show(const crcutil_interface::CRC *crc) {
   uint64 lo1 = 1;
   memset(buffer, 0, sizeof(buffer));
   crc->Compute(buffer, sizeof(buffer), &lo1);
-  xprintf("CRC of %d zeroes = %llx, expected %llx\n",
+  xprintf("CRC of %d zeroes = %lx, expected %lx\n",
           static_cast<int>(sizeof(buffer)),
           lo,
           lo1);
@@ -104,15 +104,15 @@ void Show(const crcutil_interface::CRC *crc) {
   for (size_t i = 0; i <= kRollWindow; ++i) {
     crc->RollStartValue(&lo);
     crc->Compute(kTestData + i, kRollWindow, &lo);
-    xprintf(" 0x%llx", lo);
+    xprintf(" 0x%lx", lo);
   }
   xprintf("\n");
 
   crc->RollStart(kTestData, &lo, NULL);
-  xprintf("RollingCrc actual   = 0x%llx", lo);
+  xprintf("RollingCrc actual   = 0x%lx", lo);
   for (size_t i = 1; i <= kRollWindow; ++i) {
     crc->Roll(kTestData[i - 1], kTestData[i - 1 + kRollWindow], &lo, NULL);
-    xprintf(" 0x%llx", lo);
+    xprintf(" 0x%lx", lo);
   }
   xprintf("\n");
 
@@ -128,7 +128,7 @@ void Show(const crcutil_interface::CRC *crc) {
                         1, 0,   // new start value
                         sizeof(kTestData) - 1,
                         &lo1);
-  xprintf("CRC(\"%s\", 0) = 0x%llx, CRC(\"%s\", 1)=0x%llx, expected 0x%llx\n",
+  xprintf("CRC(\"%s\", 0) = 0x%lx, CRC(\"%s\", 1)=0x%lx, expected 0x%lx\n",
       kTestData, lo, kTestData, lo1, lo1_expected);
 
   //
@@ -146,8 +146,8 @@ void Show(const crcutil_interface::CRC *crc) {
   uint64 lo2_expected = start_value;
   crc->Compute(kTestData, sizeof(kTestData) - 1, &lo2_expected);
 
-  xprintf("CRC(\"%.*s\", 1) = 0x%llx, CRC(\"%s\", 0)=0x%llx, "
-         "CRC(\"%s\", 1) = 0x%llx, expected 0x%llx\n",
+  xprintf("CRC(\"%.*s\", 1) = 0x%lx, CRC(\"%s\", 0)=0x%lx, "
+         "CRC(\"%s\", 1) = 0x%lx, expected 0x%lx\n",
          kTestDataHead, kTestData, lo,
          kTestData + kTestDataHead, lo1,
          kTestData, lo2,
@@ -170,7 +170,7 @@ void Show(const crcutil_interface::CRC *crc) {
   lo1 = 1;
   crc->Compute(buffer, sizeof(kTestData) - 1 + stored_crc_bytes, &lo1);
 
-  xprintf("Crc of message + complementary CRC = %llx, expected 0\n", lo1);
+  xprintf("Crc of message + complementary CRC = %lx, expected 0\n", lo1);
 
   //
   // Store CRC after the message and ensure that CRC of message + its
@@ -188,7 +188,7 @@ void Show(const crcutil_interface::CRC *crc) {
   // Ensure that it matches "predicted" constant value, irrespective
   // of a message or CRC start value.
   crc->CrcOfCrc(&lo2);
-  xprintf("CrcOfCrc=%llx, expected %llx\n", lo1, lo2);
+  xprintf("CrcOfCrc=%lx, expected %lx\n", lo1, lo2);
 
   xprintf("\n");
 }
-- 
1.8.3.2

