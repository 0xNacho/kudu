// Copyright (c) 2013, Cloudera, inc.
// Confidential Cloudera Information: Covered by NDA.
package kudu.metadata;

import "kudu/common/common.proto";

// ===========================================================================
//  Consensus Metadata
// TODO: move this to consensus/
// ===========================================================================

// A peer in a quorum.
message QuorumPeerPB {
  // The possible roles for quorum peers.
  enum Role {
    // Indicates this node is a follower in the quorum, i.e. that it participates
    // in majorities and accepts Consensus::Update() calls.
    FOLLOWER = 0;
    // Indicates this node is a leader candidate in the quorum, i.e. that it
    // that it behaves as FOLLOWER and can be elected LEADER.
    CANDIDATE = 1;
    // Indicates this node is the current leader of the quorum, i.e. that it
    // participates in majorities and accepts Consensus::Append() calls.
    LEADER = 2;
    // Indicates that this node participates in the quorum in a passive role,
    // i.e. that it accepts Consensus::Update() calls but does not participate
    // in elections or majorities.
    LEARNER = 3;
    // Indicates that this node is not a participant of the quorum, i.e. does
    // not accept Consensus::Update() or Consensus::Update() and cannot
    // participate in elections or majorities. This is usually the role of a node
    // that leaves the quorum.
    NON_PARTICIPANT = 4;
    // Indicates that this peer does not know its role in this particular quorum.
    UNKNOWN = 5;
  };
  // Permanent uuid is optional: QuorumPeerPB/QuorumPB instances may
  // be created before the permanent uuid is known (e.g., when
  // manually specifying a quorum for Master/CatalogManager);
  // permament uuid can be retrieved at a later time through RPC.
  optional bytes permanent_uuid = 1;
  // TODO: can we just make this field required and get rid of UNKNOWN?
  optional Role role = 2 [ default = UNKNOWN ];
  optional HostPortPB last_known_addr = 3;
}

// A set of quorum peers, serving a single tablet.
message QuorumPB {
  // the sequence number of the quorum configuration.
  required int64 seqno = 1;
  // whether this is a local or distributed quorum (i.e. whether to use a local or dist
  // implementation of consensus).
  optional bool local = 2 [default = true];
  // the set of peers in the quorum.
  repeated QuorumPeerPB peers = 3;
}
