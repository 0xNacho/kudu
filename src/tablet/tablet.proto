// Copyright (c) 2013, Cloudera, inc.
package kudu.tablet;

import "common/wire_protocol.proto";

// Stores the id of the MemRowSet (for MemRowSet mutations) or of the row set
// *and* delta for DeltaRowStore mutations.
message MutationTargetPB {
  optional int64 mrs_id = 1;
  optional int64 rs_id = 2;
  optional int64 delta_id = 3;
}

// Keeps a set of mutations applied to a single key on mutate. Usually only
// contains one entry in 'mutations' but may contain two if the mutation went
// through a DuplicatingRowSet.
message MutationResultPB {

  enum MutationTypePB {
    NO_MUTATION = 0;
    MRS_MUTATION = 1;
    DELTA_MUTATION = 2;
    DUPLICATED_MUTATION = 3;
    FAILED_MUTATION = 4;
  }

  required MutationTypePB type = 1;
  repeated MutationTargetPB mutations = 2;
}

// A mutation executed during the ReupdateMissedDeltas() phase of compaction/flush.
// Needs to keep the actual row key and changelist of the mutated row so that we
// can replay it on recovery.
message MissedDeltaMutationPB {
  required kudu.RowwiseRowBlockPB row_key = 1;
  required bytes changelist = 2;
}

// Stores the result of an Insert or Mutate.
message TxOperationPB {

  enum TxOperationTypePB {
    INSERT = 0;
    MUTATE = 1;
  }
  // The type of the operation, inserts will have 'mrs_id' set and mutations
  // will have 'mutation_result' set. In either case if 'failed_status' is set
  // then the operation failed.
  required TxOperationTypePB type = 1;
  // set if this particular operation failed
  optional kudu.AppStatusPB failed_status = 2;
  // set if this is an InsertOp
  optional int64 mrs_id = 3;
  // set if this is a MutationOp
  optional MutationResultPB mutation_result = 4;
  // set if this is a missed mutation. 'mutation_result' must also be set.
  optional MissedDeltaMutationPB missed_delta_mutation = 5;
}

// The final result of a transaction, including the result of each individual
// operation.
message TxResultPB {
  // the transaction id for the operation
  required bytes txid = 1;
  // all the inserts in this transaction
  repeated TxOperationPB inserts = 2;
  // all the mutations in this transaction
  repeated TxOperationPB mutations = 3;
}

// Delta statistics for a flushed deltastore
message DeltaStatsPB {
  // Number of deletes (deletes result in deletion of an entire row)
  required int64 delete_count = 1;
  // Repeated update count for each column or zero if no updates are
  // available for the column
  repeated int64 per_column_update_count = 2;
  // The min txid_t that was stored in this delta.
  required bytes min_txid = 3;
  // The max txid_t that was stored in this delta.
  required bytes max_txid = 4;
}
