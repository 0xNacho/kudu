// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kudu {
namespace cfile {

namespace {

const ::google::protobuf::Descriptor* CFileHeaderPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CFileHeaderPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockPointerPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPointerPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BTreeMetaPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BTreeMetaPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BTreeInfoPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BTreeInfoPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* IndexBlockTrailerPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndexBlockTrailerPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IndexBlockTrailerPB_BlockType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CFileFooterPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CFileFooterPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cfile_2eproto() {
  protobuf_AddDesc_cfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cfile.proto");
  GOOGLE_CHECK(file != NULL);
  CFileHeaderPB_descriptor_ = file->message_type(0);
  static const int CFileHeaderPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileHeaderPB, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileHeaderPB, minor_version_),
  };
  CFileHeaderPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CFileHeaderPB_descriptor_,
      CFileHeaderPB::default_instance_,
      CFileHeaderPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileHeaderPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileHeaderPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CFileHeaderPB));
  BlockPointerPB_descriptor_ = file->message_type(1);
  static const int BlockPointerPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPointerPB, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPointerPB, size_),
  };
  BlockPointerPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPointerPB_descriptor_,
      BlockPointerPB::default_instance_,
      BlockPointerPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPointerPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPointerPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPointerPB));
  BTreeMetaPB_descriptor_ = file->message_type(2);
  static const int BTreeMetaPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeMetaPB, identifier_),
  };
  BTreeMetaPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BTreeMetaPB_descriptor_,
      BTreeMetaPB::default_instance_,
      BTreeMetaPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeMetaPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeMetaPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BTreeMetaPB));
  BTreeInfoPB_descriptor_ = file->message_type(3);
  static const int BTreeInfoPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeInfoPB, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeInfoPB, root_block_),
  };
  BTreeInfoPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BTreeInfoPB_descriptor_,
      BTreeInfoPB::default_instance_,
      BTreeInfoPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeInfoPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BTreeInfoPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BTreeInfoPB));
  IndexBlockTrailerPB_descriptor_ = file->message_type(4);
  static const int IndexBlockTrailerPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexBlockTrailerPB, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexBlockTrailerPB, type_),
  };
  IndexBlockTrailerPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndexBlockTrailerPB_descriptor_,
      IndexBlockTrailerPB::default_instance_,
      IndexBlockTrailerPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexBlockTrailerPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndexBlockTrailerPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndexBlockTrailerPB));
  IndexBlockTrailerPB_BlockType_descriptor_ = IndexBlockTrailerPB_descriptor_->enum_type(0);
  CFileFooterPB_descriptor_ = file->message_type(5);
  static const int CFileFooterPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileFooterPB, btrees_),
  };
  CFileFooterPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CFileFooterPB_descriptor_,
      CFileFooterPB::default_instance_,
      CFileFooterPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileFooterPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFileFooterPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CFileFooterPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CFileHeaderPB_descriptor_, &CFileHeaderPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPointerPB_descriptor_, &BlockPointerPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BTreeMetaPB_descriptor_, &BTreeMetaPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BTreeInfoPB_descriptor_, &BTreeInfoPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndexBlockTrailerPB_descriptor_, &IndexBlockTrailerPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CFileFooterPB_descriptor_, &CFileFooterPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cfile_2eproto() {
  delete CFileHeaderPB::default_instance_;
  delete CFileHeaderPB_reflection_;
  delete BlockPointerPB::default_instance_;
  delete BlockPointerPB_reflection_;
  delete BTreeMetaPB::default_instance_;
  delete BTreeMetaPB_reflection_;
  delete BTreeInfoPB::default_instance_;
  delete BTreeInfoPB_reflection_;
  delete IndexBlockTrailerPB::default_instance_;
  delete IndexBlockTrailerPB_reflection_;
  delete CFileFooterPB::default_instance_;
  delete CFileFooterPB_reflection_;
}

void protobuf_AddDesc_cfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013cfile.proto\022\nkudu.cfile\"=\n\rCFileHeader"
    "PB\022\025\n\rmajor_version\030\001 \002(\005\022\025\n\rminor_versi"
    "on\030\002 \002(\005\".\n\016BlockPointerPB\022\016\n\006offset\030\001 \002"
    "(\003\022\014\n\004size\030\002 \002(\005\"!\n\013BTreeMetaPB\022\022\n\nident"
    "ifier\030\001 \002(\t\"h\n\013BTreeInfoPB\022)\n\010metadata\030\001"
    " \002(\0132\027.kudu.cfile.BTreeMetaPB\022.\n\nroot_bl"
    "ock\030\002 \002(\0132\032.kudu.cfile.BlockPointerPB\"\210\001"
    "\n\023IndexBlockTrailerPB\022\023\n\013num_entries\030\001 \002"
    "(\005\0227\n\004type\030\002 \002(\0162).kudu.cfile.IndexBlock"
    "TrailerPB.BlockType\"#\n\tBlockType\022\010\n\004LEAF"
    "\020\000\022\014\n\010INTERNAL\020\001\"8\n\rCFileFooterPB\022\'\n\006btr"
    "ees\030\001 \003(\0132\027.kudu.cfile.BTreeInfoPB", 474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfile.proto", &protobuf_RegisterTypes);
  CFileHeaderPB::default_instance_ = new CFileHeaderPB();
  BlockPointerPB::default_instance_ = new BlockPointerPB();
  BTreeMetaPB::default_instance_ = new BTreeMetaPB();
  BTreeInfoPB::default_instance_ = new BTreeInfoPB();
  IndexBlockTrailerPB::default_instance_ = new IndexBlockTrailerPB();
  CFileFooterPB::default_instance_ = new CFileFooterPB();
  CFileHeaderPB::default_instance_->InitAsDefaultInstance();
  BlockPointerPB::default_instance_->InitAsDefaultInstance();
  BTreeMetaPB::default_instance_->InitAsDefaultInstance();
  BTreeInfoPB::default_instance_->InitAsDefaultInstance();
  IndexBlockTrailerPB::default_instance_->InitAsDefaultInstance();
  CFileFooterPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cfile_2eproto {
  StaticDescriptorInitializer_cfile_2eproto() {
    protobuf_AddDesc_cfile_2eproto();
  }
} static_descriptor_initializer_cfile_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CFileHeaderPB::kMajorVersionFieldNumber;
const int CFileHeaderPB::kMinorVersionFieldNumber;
#endif  // !_MSC_VER

CFileHeaderPB::CFileHeaderPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CFileHeaderPB::InitAsDefaultInstance() {
}

CFileHeaderPB::CFileHeaderPB(const CFileHeaderPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CFileHeaderPB::SharedCtor() {
  _cached_size_ = 0;
  major_version_ = 0;
  minor_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFileHeaderPB::~CFileHeaderPB() {
  SharedDtor();
}

void CFileHeaderPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CFileHeaderPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFileHeaderPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CFileHeaderPB_descriptor_;
}

const CFileHeaderPB& CFileHeaderPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

CFileHeaderPB* CFileHeaderPB::default_instance_ = NULL;

CFileHeaderPB* CFileHeaderPB::New() const {
  return new CFileHeaderPB;
}

void CFileHeaderPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_version_ = 0;
    minor_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CFileHeaderPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 major_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor_version;
        break;
      }
      
      // required int32 minor_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CFileHeaderPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 major_version = 1;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major_version(), output);
  }
  
  // required int32 minor_version = 2;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CFileHeaderPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 major_version = 1;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major_version(), target);
  }
  
  // required int32 minor_version = 2;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CFileHeaderPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 major_version = 1;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }
    
    // required int32 minor_version = 2;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFileHeaderPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CFileHeaderPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CFileHeaderPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CFileHeaderPB::MergeFrom(const CFileHeaderPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CFileHeaderPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileHeaderPB::CopyFrom(const CFileHeaderPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileHeaderPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CFileHeaderPB::Swap(CFileHeaderPB* other) {
  if (other != this) {
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CFileHeaderPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CFileHeaderPB_descriptor_;
  metadata.reflection = CFileHeaderPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockPointerPB::kOffsetFieldNumber;
const int BlockPointerPB::kSizeFieldNumber;
#endif  // !_MSC_VER

BlockPointerPB::BlockPointerPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockPointerPB::InitAsDefaultInstance() {
}

BlockPointerPB::BlockPointerPB(const BlockPointerPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockPointerPB::SharedCtor() {
  _cached_size_ = 0;
  offset_ = GOOGLE_LONGLONG(0);
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPointerPB::~BlockPointerPB() {
  SharedDtor();
}

void BlockPointerPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockPointerPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPointerPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPointerPB_descriptor_;
}

const BlockPointerPB& BlockPointerPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

BlockPointerPB* BlockPointerPB::default_instance_ = NULL;

BlockPointerPB* BlockPointerPB::New() const {
  return new BlockPointerPB;
}

void BlockPointerPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = GOOGLE_LONGLONG(0);
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockPointerPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockPointerPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset(), output);
  }
  
  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockPointerPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset(), target);
  }
  
  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockPointerPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset());
    }
    
    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockPointerPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockPointerPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockPointerPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockPointerPB::MergeFrom(const BlockPointerPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockPointerPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPointerPB::CopyFrom(const BlockPointerPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPointerPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BlockPointerPB::Swap(BlockPointerPB* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockPointerPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPointerPB_descriptor_;
  metadata.reflection = BlockPointerPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BTreeMetaPB::kIdentifierFieldNumber;
#endif  // !_MSC_VER

BTreeMetaPB::BTreeMetaPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BTreeMetaPB::InitAsDefaultInstance() {
}

BTreeMetaPB::BTreeMetaPB(const BTreeMetaPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BTreeMetaPB::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BTreeMetaPB::~BTreeMetaPB() {
  SharedDtor();
}

void BTreeMetaPB::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void BTreeMetaPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BTreeMetaPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BTreeMetaPB_descriptor_;
}

const BTreeMetaPB& BTreeMetaPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

BTreeMetaPB* BTreeMetaPB::default_instance_ = NULL;

BTreeMetaPB* BTreeMetaPB::New() const {
  return new BTreeMetaPB;
}

void BTreeMetaPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BTreeMetaPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BTreeMetaPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BTreeMetaPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BTreeMetaPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BTreeMetaPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BTreeMetaPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BTreeMetaPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BTreeMetaPB::MergeFrom(const BTreeMetaPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BTreeMetaPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTreeMetaPB::CopyFrom(const BTreeMetaPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTreeMetaPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BTreeMetaPB::Swap(BTreeMetaPB* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BTreeMetaPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BTreeMetaPB_descriptor_;
  metadata.reflection = BTreeMetaPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BTreeInfoPB::kMetadataFieldNumber;
const int BTreeInfoPB::kRootBlockFieldNumber;
#endif  // !_MSC_VER

BTreeInfoPB::BTreeInfoPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BTreeInfoPB::InitAsDefaultInstance() {
  metadata_ = const_cast< ::kudu::cfile::BTreeMetaPB*>(&::kudu::cfile::BTreeMetaPB::default_instance());
  root_block_ = const_cast< ::kudu::cfile::BlockPointerPB*>(&::kudu::cfile::BlockPointerPB::default_instance());
}

BTreeInfoPB::BTreeInfoPB(const BTreeInfoPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BTreeInfoPB::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  root_block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BTreeInfoPB::~BTreeInfoPB() {
  SharedDtor();
}

void BTreeInfoPB::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
    delete root_block_;
  }
}

void BTreeInfoPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BTreeInfoPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BTreeInfoPB_descriptor_;
}

const BTreeInfoPB& BTreeInfoPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

BTreeInfoPB* BTreeInfoPB::default_instance_ = NULL;

BTreeInfoPB* BTreeInfoPB::New() const {
  return new BTreeInfoPB;
}

void BTreeInfoPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::kudu::cfile::BTreeMetaPB::Clear();
    }
    if (has_root_block()) {
      if (root_block_ != NULL) root_block_->::kudu::cfile::BlockPointerPB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BTreeInfoPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .kudu.cfile.BTreeMetaPB metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_root_block;
        break;
      }
      
      // required .kudu.cfile.BlockPointerPB root_block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BTreeInfoPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .kudu.cfile.BTreeMetaPB metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  // required .kudu.cfile.BlockPointerPB root_block = 2;
  if (has_root_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->root_block(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BTreeInfoPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .kudu.cfile.BTreeMetaPB metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  // required .kudu.cfile.BlockPointerPB root_block = 2;
  if (has_root_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->root_block(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BTreeInfoPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .kudu.cfile.BTreeMetaPB metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
    // required .kudu.cfile.BlockPointerPB root_block = 2;
    if (has_root_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_block());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BTreeInfoPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BTreeInfoPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BTreeInfoPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BTreeInfoPB::MergeFrom(const BTreeInfoPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::kudu::cfile::BTreeMetaPB::MergeFrom(from.metadata());
    }
    if (from.has_root_block()) {
      mutable_root_block()->::kudu::cfile::BlockPointerPB::MergeFrom(from.root_block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BTreeInfoPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BTreeInfoPB::CopyFrom(const BTreeInfoPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BTreeInfoPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  if (has_root_block()) {
    if (!this->root_block().IsInitialized()) return false;
  }
  return true;
}

void BTreeInfoPB::Swap(BTreeInfoPB* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    std::swap(root_block_, other->root_block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BTreeInfoPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BTreeInfoPB_descriptor_;
  metadata.reflection = BTreeInfoPB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IndexBlockTrailerPB_BlockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexBlockTrailerPB_BlockType_descriptor_;
}
bool IndexBlockTrailerPB_BlockType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB::LEAF;
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB::INTERNAL;
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB::BlockType_MIN;
const IndexBlockTrailerPB_BlockType IndexBlockTrailerPB::BlockType_MAX;
const int IndexBlockTrailerPB::BlockType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IndexBlockTrailerPB::kNumEntriesFieldNumber;
const int IndexBlockTrailerPB::kTypeFieldNumber;
#endif  // !_MSC_VER

IndexBlockTrailerPB::IndexBlockTrailerPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IndexBlockTrailerPB::InitAsDefaultInstance() {
}

IndexBlockTrailerPB::IndexBlockTrailerPB(const IndexBlockTrailerPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IndexBlockTrailerPB::SharedCtor() {
  _cached_size_ = 0;
  num_entries_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndexBlockTrailerPB::~IndexBlockTrailerPB() {
  SharedDtor();
}

void IndexBlockTrailerPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndexBlockTrailerPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndexBlockTrailerPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndexBlockTrailerPB_descriptor_;
}

const IndexBlockTrailerPB& IndexBlockTrailerPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

IndexBlockTrailerPB* IndexBlockTrailerPB::default_instance_ = NULL;

IndexBlockTrailerPB* IndexBlockTrailerPB::New() const {
  return new IndexBlockTrailerPB;
}

void IndexBlockTrailerPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_entries_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndexBlockTrailerPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::kudu::cfile::IndexBlockTrailerPB_BlockType_IsValid(value)) {
            set_type(static_cast< ::kudu::cfile::IndexBlockTrailerPB_BlockType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IndexBlockTrailerPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num_entries = 1;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_entries(), output);
  }
  
  // required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IndexBlockTrailerPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num_entries = 1;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_entries(), target);
  }
  
  // required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IndexBlockTrailerPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num_entries = 1;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }
    
    // required .kudu.cfile.IndexBlockTrailerPB.BlockType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndexBlockTrailerPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndexBlockTrailerPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndexBlockTrailerPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndexBlockTrailerPB::MergeFrom(const IndexBlockTrailerPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndexBlockTrailerPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexBlockTrailerPB::CopyFrom(const IndexBlockTrailerPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexBlockTrailerPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IndexBlockTrailerPB::Swap(IndexBlockTrailerPB* other) {
  if (other != this) {
    std::swap(num_entries_, other->num_entries_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndexBlockTrailerPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndexBlockTrailerPB_descriptor_;
  metadata.reflection = IndexBlockTrailerPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CFileFooterPB::kBtreesFieldNumber;
#endif  // !_MSC_VER

CFileFooterPB::CFileFooterPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CFileFooterPB::InitAsDefaultInstance() {
}

CFileFooterPB::CFileFooterPB(const CFileFooterPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CFileFooterPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFileFooterPB::~CFileFooterPB() {
  SharedDtor();
}

void CFileFooterPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CFileFooterPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFileFooterPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CFileFooterPB_descriptor_;
}

const CFileFooterPB& CFileFooterPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cfile_2eproto();  return *default_instance_;
}

CFileFooterPB* CFileFooterPB::default_instance_ = NULL;

CFileFooterPB* CFileFooterPB::New() const {
  return new CFileFooterPB;
}

void CFileFooterPB::Clear() {
  btrees_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CFileFooterPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kudu.cfile.BTreeInfoPB btrees = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_btrees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_btrees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_btrees;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CFileFooterPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .kudu.cfile.BTreeInfoPB btrees = 1;
  for (int i = 0; i < this->btrees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->btrees(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CFileFooterPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .kudu.cfile.BTreeInfoPB btrees = 1;
  for (int i = 0; i < this->btrees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->btrees(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CFileFooterPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .kudu.cfile.BTreeInfoPB btrees = 1;
  total_size += 1 * this->btrees_size();
  for (int i = 0; i < this->btrees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->btrees(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFileFooterPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CFileFooterPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CFileFooterPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CFileFooterPB::MergeFrom(const CFileFooterPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  btrees_.MergeFrom(from.btrees_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CFileFooterPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFileFooterPB::CopyFrom(const CFileFooterPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFileFooterPB::IsInitialized() const {
  
  for (int i = 0; i < btrees_size(); i++) {
    if (!this->btrees(i).IsInitialized()) return false;
  }
  return true;
}

void CFileFooterPB::Swap(CFileFooterPB* other) {
  if (other != this) {
    btrees_.Swap(&other->btrees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CFileFooterPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CFileFooterPB_descriptor_;
  metadata.reflection = CFileFooterPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfile
}  // namespace kudu

// @@protoc_insertion_point(global_scope)
