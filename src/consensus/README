This document introduces how Kudu will handle log replication and consistency
using an algorithm known as Viewstamped Replication (VS) and a series of 
practical algorithms/techniques for recovery, reconfiguration, compactions etc.
This document introduces all the concepts directly related to Kudu, for any
missing information please refer to the original papers [1,3,4].

Quorums, in Kudu, are a set of collaborating processes that serve the purpose
of keeping a consistent, replicated log of operations on a given data set, e.g.
a tablet. This replicated consistent log, also plays the role of the Write
Ahead Log (WAL) for the tablet. Throughout this document we use quorum
participant and process interchangeably, these do not represent machines or OS
processes, as machines and or application daemons will participate in multiple
quorums.

============================================================
Quorums and roles within quorums
============================================================

A quorum in Kudu is a fault-tolerant, consistent unit that serves requests for
a single tablet. As long as there are 2f+1 participants available in a quorum,
where f is the number of possibly faulty participants, the quorum will keep
serving requests for its tablet and it is guaranteed that clients perceive a
fully consistent, linearizable view of both data and operations on that data.
The f parameter, defined table wide through configuration implicitly
defines the size of the quorum, f=0 indicates a single node quorum, f=1
indicates a 3 node quorum, f=2 indicates a 5 node quorum, etc.. Quorums may
overlap in the sense that each physical machine may be participating in
multiple quorums, usually one per each tablet that it serves.

Within a single quorum, in steady state, i.e. when no peer is faulty, there
are two main types of peers. The leader peer and the follower peers.
The leader peer dictates the serialization of the operations throughout the
quorum, its version of the sequence of data altering requests is the "truth"
and any data altering request is only considered final (i.e. can be
acknowledged to the client as successful) when a majority of the quorum
acknowledges that they "agree" with the leader's view of the event order.
In practice this means that all write requests are sent directly to the
leader, which then replicates them to a majority of the followers before
sending an ACK to the client. Follower peers are completely passive in
steady state, only receiving data from the leader and acknowledging back.
Follower peers only become active when the leader process stops and one
of the followers (if there are any) must be elected leader.

Participants in a quorum may be assigned the following roles:

LEADER - The current leader of the quorum, receives requests from clients
and serializes them to other nodes.

FOLLOWER - Active participants in the quorum, whose votes count towards
majority, replication count etc.

LEARNER - Passive participants in the quorum, whose votes do not count
towards majority or replication count. New nodes joining the quorum
will have this role until they catch up and can be promoted to FOLLOWER.

CANDIDATE - A peer who has put itself up for leader and is waiting election
results.

NON_PARTICIPANT - A peer that does not participate in a particular
quorum. Mostly used to mark prior participants that stopped being so
on a configuration change.

The following diagram illustrates the possible state changes:

                 +------------+
                 |  NON_PART  +---+
                 +-----+------+   |
       Exist. Quorum?  |          |
                 +-----v------+   |
                 |  LEARNER   +   | New Quorum?
                 +-----+------+   |
                       |          |
                 +-----v------+   |
             +-->+  FOLLOW.   +<--+
             |   +-----+------+
             |         |
             |   +-----v------+
  Step Down  +<--+ CANDIDATE  |
             ^   +-----+------+
             |         |
             |   +-----v------+
             +<--+   LEADER   |
                 +------------+

Additionally all states can transition to NON_PARTICIPANT, on configuration
changes and/or peer timeout/death.

============================================================
Assembling/Rebooting a Quorum and Quorum States
============================================================

Prior to starting/rebooting a peer, the state in WAL must have been replayed
in a bootstrap phase. This process will yield an up-to-date Log and Tablet.
The new/rebooting peer is then Init()'ed with this Log. The Log is queried
for the last committed configuration entry (A quorum configuration consists of
a set of peers (uuid and last known address) and hinted* roles). If there is
none, it means this is a new quorum.

After the peer has been Init()'ed, Start(Configuration) is called. The provided
configuration is a hint which is only taken into account if there was no previous
configuration*.

Independently of whether the configuration is a new one (new quorum)
or an old one (rebooting quorum), the quorum cannot start until a
leader has been elected and replicates the configuration through
consensus. This ensures that a majority of nodes agree that this is
the most recent configuration.

The provided configuration will always specify a leader -- in the case
of a new quorum, it is chosen by the master, and in the case of a
rebooted one, it is the configuration that was active before the node
crashed. In either case, replicating this initial configuration
entry happens in the exact same way as any other quorum entry,
i.e. the LEADER will try and replicate it to FOLLOWERS. As usual if
the LEADER fails, leader election is triggered and the new LEADER will
try to replicate a new configuration.

Only after the quorum has successfully replicated the initial configuration
entry is the quorum ready to accept writes.


Peers in the quorum can therefore be in the following states:

BOOTSTRAPPING - The phase prior to initialization where the Log is being
replayed. If a majority of peers are still BOOTSTRAPPING, the quorum doesn't
exist yet.

CONFIGURING: Until the current configuration is pushed though consensus. This
is true for both new quorums and rebooting quorums. The peers do not accept
client requests in this state. In this state, the Leader tries to replicate
the configuration. Followers run failure detection and trigger leader election
if the hinted leader doesn't successfully replicate within the configured
timeout period.

RUNNING: The LEADER peer accepts writes and replicates them through consensus.
FOLLOWER replicas accepts writes from the leader and ACK.

* The configuration provided on Start() can only be taken into account if there
is an appropriate leader election algorithm. This can be added later but is not
present in the initial implementation. Roles are hinted in the sense that the
quorum initiator (usually the master) might hint what the roles for the peers
in the quorum should be, but the quorum is the ultimate decider on whether that
is possible or not.

============================================================
References
============================================================
[1] http://ramcloud.stanford.edu/raft.pdf

[2] http://www.cs.berkeley.edu/~brewer/cs262/Aries.pdf

[3] Viewstamped Replication: A New Primary Copy Method to Support
Highly-Available Distributed Systems. B. Oki, B. Liskov
http://www.pmg.csail.mit.edu/papers/vr.pdf

[4] Viewstamped Replication Revisited. B. Liskov and J. Cowling 
http://pmg.csail.mit.edu/papers/vr-revisited.pdf

[5] Aether: A Scalable Approach to logging
http://infoscience.epfl.ch/record/149436/files/vldb10aether.pdf