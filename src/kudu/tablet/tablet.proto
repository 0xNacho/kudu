// Copyright (c) 2013, Cloudera, inc.
// Confidential Cloudera Information: Covered by NDA.
package kudu.tablet;

import "kudu/common/wire_protocol.proto";
import "kudu/tablet/metadata.proto";

// Stores the id of the MemRowSet (for inserts or mutations against MRS)
// or of the (row set, delta ID) pair for mutations against a DiskRowSet.
message MemStoreTargetPB {
  // -1 defaults here are so that, if a caller forgets to check has_mrs_id(),
  // they won't accidentally see real-looking (i.e 0) IDs.

  // Either this field...
  optional int64 mrs_id = 1 [ default = -1];

  // ... or both of the following fields are set.
  optional int64 rs_id = 2 [ default = -1 ];
  optional int64 dms_id = 3 [ default = -1 ];
}

// Stores the result of an Insert or Mutate.
message OperationResultPB {

  // set on replay if this operation was already flushed.
  optional bool flushed = 1 [ default = false ];

  // set if this particular operation failed
  optional kudu.AppStatusPB failed_status = 2;

  // The stores that the operation affected.
  // For INSERTs, this will always be just one store.
  // For MUTATE, it may be more than one if the mutation arrived during
  // a compaction.
  repeated MemStoreTargetPB mutated_stores = 3;
}

// The final result of a transaction, including the result of each individual
// operation.
message TxResultPB {
  // all the operations in this transaction
  repeated OperationResultPB ops = 1;
}

// Delta statistics for a flushed deltastore
message DeltaStatsPB {
  // Number of deletes (deletes result in deletion of an entire row)
  required int64 delete_count = 1;
  // Repeated update count for each column or zero if no updates are
  // available for the column
  repeated int64 per_column_update_count = 2;
  // The min Timestamp that was stored in this delta.
  required fixed64 min_timestamp = 3;
  // The max Timestamp that was stored in this delta.
  required fixed64 max_timestamp = 4;
}

message TabletStatusPB {
  required string tablet_id = 1;
  required string table_name = 2;
  required TabletStatePB state = 3;
  required string last_status = 4;
  required string start_key = 5;
  required string end_key = 6;
  optional int64 estimated_on_disk_size = 7;
}

// Used to present the maintenance manager's internal state.
message MaintenanceManagerStatusPB {
  message MaintenanceOpPB {
    required string name = 1;
    // Number of times this operation is currently running.
    required uint32 running = 2;
    required bool runnable = 3;
    required uint64 ram_anchored_bytes = 4;
    required int64 logs_retained_bytes = 5;
    required double perf_improvement = 6;
  }

  message CompletedOpPB {
    required string name = 1;
    required int32 duration_secs = 2;
    // Number of seconds since this operation started.
    required int32 secs_since_start = 3;
  }

  // The next operation that would run.
  optional MaintenanceOpPB best_op = 1;

  // List of all the operations.
  repeated MaintenanceOpPB registered_operations = 2;

  // This list isn't in order of anything. Can contain the same operation mutiple times.
  repeated CompletedOpPB completed_operations = 3;
}
