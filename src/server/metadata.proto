// Copyright (c) 2013, Cloudera, inc.

package kudu.metadata;

import "common/common.proto";
import "cfile/cfile.proto";

// ============================================================================
//  Table Metadata
// ============================================================================

message ColumnAttributesPB {
  required uint64 id = 1;
  optional uint32 block_size = 2;
  optional cfile.EncodingType encoding_type = 3;
  optional cfile.CompressionType compression_type = 4;
}

message TableSchemaPB {
  repeated ColumnSchemaPB columns = 1;
  repeated ColumnAttributesPB attributes = 2;
}

message MetadataPairPB {
  required string key = 1;
  required bytes value = 2;
}

enum TableType {
  BOOTSTRAP_TABLE = 1;
  SYSTEM_TABLE = 2;
  USER_TABLE = 3;
}

message TableDescriptorPB {
  optional string oid = 1;
  optional TableType type = 2 [default = USER_TABLE];
  required TableSchemaPB schema = 3;
  repeated MetadataPairPB user_attrs = 4;
}

// ============================================================================
//  Tablet Locations
// ============================================================================

message TabletServerPB {
  required string hostname = 1;
  optional uint32 port = 2;
}

message TabletLocationsPB {
  required bytes start_key = 1;
  required bytes end_key = 2;
  repeated TabletServerPB servers = 3;
}

// ============================================================================
//  Tablet Metadata
// ============================================================================

message BlockIdPB {
  required string id = 1;
}

message ColumnDataPB {
  required BlockIdPB block = 2;
  required ColumnSchemaPB schema = 3;
}

message DeltaDataPB {
  required uint64 id = 1;
  required BlockIdPB block = 2;
}

message RowSetDataPB {
  required uint64 id = 1;
  required int64 last_durable_dms_id = 2;
  repeated ColumnDataPB columns = 3;
  repeated DeltaDataPB deltas = 4;
  optional BlockIdPB bloom_block = 5;
  optional BlockIdPB adhoc_index_block = 6;
}

// The super-block keeps track of the tablet data blocks.
// A tablet contains one or more RowSets, which contain
// a set of blocks (one for each column), a set of delta blocks
// and optionally a block containing the bloom filter
// and a block containing the compound-keys.
message TabletSuperBlockPB {
  // SuperBlock sequence number.
  // This is incremented every time the superblock is successfully written,
  // in order to easily alternate between block_a and block_b.
  required uint64 sequence = 1;

  // Tablet Id
  required string oid = 2;

  // The latest durable MemRowSet id
  required int64 last_durable_mrs_id = 3;

  // Tablet start-key
  required bytes start_key = 4;

  // Tablet end-key
  required bytes end_key = 5;

  // Tablet RowSets
  repeated RowSetDataPB rowsets = 6;

  // The latest schema
  // TODO: maybe this should be TableSchemaPB? Need to actually put those attributes
  // into use throughout the code. Using the simpler one for now.
  required SchemaPB schema = 7;
}

// The master-block contains the two block-ids required to load the
// tablet super-block. The master-block is immutable and written to the
// "bootstrap table", on tablet creation, and it is used by the master
// to load all the tablets in the system at startup.
message TabletMasterBlockPB {
  required bytes tablet_id = 1;
  required bytes block_a = 2;
  required bytes block_b = 3;
}
