#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Simple script to set up jekyll for building the site.
# This may evolve to have other handy tools.

import os
import logging
import subprocess
import sys

SITE_ROOT = os.path.abspath(os.path.dirname(__file__))
GEM_PATH = os.path.join(SITE_ROOT, ".gem")
BUNDLE_PATH = os.path.join(GEM_PATH, "bin", "bundle")

def usage_and_die():
  usage = """
usage: %(prog)s <tool> ..."

  %(prog)s jekyll ...

    Runs jekyll with the given arguments. For example:

    %(prog)s jekyll serve
    %(prog)s jekyll build

  %(prog)s proof

    Runs htmlproof to check for broken links, etc.
""" % dict(prog=sys.argv[0])
  usage = usage.strip()
  print >>sys.stderr, usage
  sys.exit(1)


def setup_bundle():
  """
  Installs bundler in the local .gem directory, and uses it to
  install the necessary gems.

  Sets the $GEM_PATH environment variable so that subsequent
  subprocess calls can find our gems.
  """
  if not os.path.exists(BUNDLE_PATH):
    try:
      subprocess.check_call(
        ["gem", "install", "--no-ri", "--no-rdoc", "-q",
         "--install-dir", GEM_PATH, "bundler"])
    except Exception, e:
      logging.fatal("Could not install 'bundler' gem: " + str(e) + "\n" +
          "Is the 'gem' tool installed?")
      sys.exit(1)
  os.environ['GEM_PATH'] = GEM_PATH
  if subprocess.call([BUNDLE_PATH, "check"]) != 0:
    logging.info("Installing gems locally...")
    subprocess.check_call([BUNDLE_PATH, "install", "--path", GEM_PATH])


def run_jekyll(args):
  setup_bundle()
  return subprocess.call(
    [os.path.join(GEM_PATH, "bin", "bundle"), "exec", "jekyll"] + args,
    cwd=SITE_ROOT)

def proof(args):
  """ Run htmlproof to check for broken links or HTML. """
  if len(args) != 0:
    usage_and_die()
  if run_jekyll(['build']) != 0:
    print >>sys.stderr, "Could not build site!"
    return 1
  return subprocess.call(
    [BUNDLE_PATH, "exec", 'htmlproof',
     '--verbose',
     # Dont check the javadocs, old doc versions, or the configuration
     # reference files which are extremely large.
     '--file-ignore', '/apidocs|releases|configuration_ref/',
     # Don't check external links (too slow!)
     '--disable-external',
     # Don't be pedantic about having an alt tag on every image
     '--alt-ignore', '/./',
     '_site/'])

def main(argv):
  logging.basicConfig(level=logging.INFO)
  if len(argv) == 0:
    usage_and_die()

  if argv[0] == 'jekyll':
    sys.exit(run_jekyll(argv[1:]))
  elif argv[0] == 'proof':
    proof(argv[1:])
  else:
    print >>sys.stderr, "Unknown tool: %s" % argv[0]
    usage_and_die()


if __name__ == "__main__":
  main(sys.argv[1:])
